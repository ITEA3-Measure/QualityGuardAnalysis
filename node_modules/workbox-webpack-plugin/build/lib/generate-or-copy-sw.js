'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  Copyright 2017 Google Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

var _require = require('workbox-build'),
    generateSWString = _require.generateSWString;

var _require2 = require('./utils/read-file'),
    readFile = _require2.readFile;

/**
 * Given a config object, remove the properties that we know are webpack-plugin
 * specific, so that the remaining properties can be passed through to
 * generateSWString().
 *
 * @param {Object} config
 * @return {Object}
 *
 * @private
 */


function sanitizeConfig(config) {
  var propertiesToRemove = ['chunks', 'excludeChunks', 'filename', 'manifestFilename'];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(propertiesToRemove), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var property = _step.value;

      delete config[property];
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return config;
}

/**
 * Generate a service worker using {@link module:workbox-build.generateSWString}
 * or append `importScripts('workbox-sw.<version>.js', 'file-manifest.js')` to
 * an existing service worker if `swSrc` is specified
 *
 * TODO:
 *    allow users to specify a webpack entry name to use as a service worker
 *    instead of just swSrc
 *
 * @function generateOrCopySW
 * @param {Object} config Configuration to pass through to
 * {@link module:workbox-build.generateSWString}.
 * @param {string} [swSrc] The path to existing service worker.
 * @return {Promise<string>} The generated service worker string.
 *
 * @private
 */
module.exports = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(config, swSrc) {
    var serviceWorkerSource, scripts;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (swSrc) {
              _context.next = 4;
              break;
            }

            return _context.abrupt('return', generateSWString(sanitizeConfig(config)));

          case 4:
            _context.next = 6;
            return readFile(swSrc);

          case 6:
            serviceWorkerSource = _context.sent;
            scripts = config.importScripts.map(function (script) {
              return `'${script}'`;
            }).join(', ');
            return _context.abrupt('return', `importScripts(${scripts});\n${serviceWorkerSource}`);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();